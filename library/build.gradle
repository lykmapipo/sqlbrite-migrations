apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'

group = 'com.github.lykmapipo'

android {
    compileSdkVersion 25

    buildToolsVersion "25.0.2"

    defaultConfig {
        minSdkVersion 11
        targetSdkVersion 25
        versionCode 100
        versionName "1.0.0"
        consumerProguardFiles 'proguard-rules.pro'
    }

    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }
}


ext {
    rxAndroidVersion = '2.0.1'
    rxJavaVersion = '2.0.1'
    sqlbriteVersion = '2.0.0-SNAPSHOT'
    yamlVersion = 'v1.18-android'
    junitVersion = '4.12'
    mockitoVersion = '1.9.5'
    robolectricVersion = '3.1.2'
}


dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    //sqlbrite dependencies
    compile "io.reactivex.rxjava2:rxjava:${rxJavaVersion}"
    compile "io.reactivex.rxjava2:rxandroid:${rxAndroidVersion}"
    compile "com.squareup.sqlbrite2:sqlbrite:${sqlbriteVersion}"

    //yaml dependencies
    compile "com.github.bmoliveira:snake-yaml:${yamlVersion}"

    //test dependencies
    testCompile "junit:junit:${junitVersion}"
    testCompile "org.mockito:mockito-core:${mockitoVersion}"
    testCompile "org.robolectric:robolectric:${robolectricVersion}"
}

// build a jar with source files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

// uncomment to build a jar file in addition to the default aar file
//android.libraryVariants.all { variant ->
//    def name = variant.buildType.name
//    def task = project.tasks.create "jar${name.capitalize()}", Jar
//    task.dependsOn variant.javaCompile
//    task.from variant.javaCompile.destinationDir
//    artifacts.add('archives', task);
//}

